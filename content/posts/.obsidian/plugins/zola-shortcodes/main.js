/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ShortCodePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var TagWidget = class extends import_view.WidgetType {
  constructor(tag, src, filePath) {
    super();
    this.tag = tag;
    this.src = src;
    this.filePath = filePath;
  }
  eq(widget) {
    return widget.src === this.src && widget.filePath === this.filePath;
  }
  toDOM(view) {
    const element = document.createElement(this.tag);
    element.setAttr("src", this.src);
    element.setAttr("data-path", this.filePath);
    return element;
  }
  ignoreEvent(event) {
    return false;
  }
};
var CalloutWidget = class extends import_view.WidgetType {
  constructor(type, text) {
    super();
    this.type = type;
    this.text = text;
  }
  eq(widget) {
    return widget.type === this.type && widget.text === this.text;
  }
  toDOM(view) {
    const callout = document.createElement("div");
    callout.setAttr("class", "callout");
    callout.setAttr("data-callout", this.type);
    const calloutTitle = callout.createEl("div");
    calloutTitle.setAttr("class", "callout-title");
    const calloutTitleInner = calloutTitle.createEl("div");
    calloutTitleInner.setAttr("class", "callout-title-inner");
    calloutTitleInner.innerHTML = this.type;
    const content = callout.createEl("div");
    content.setAttr("class", "callout-content");
    content.innerHTML = this.text;
    return callout;
  }
};
var tagRegex = /{{\s*(img|video)\(src="([\/\.\w-]+)".*}}/g;
var calloutStartRegex = /^{%\s*callout\(type="(info|tip|warn|danger)"\)\s*%}$/g;
var calloutEndRegex = /^{%\s*end\s*%}$/g;
function createStateField(plugin) {
  return import_state.StateField.define({
    create(state) {
      return import_view.Decoration.none;
    },
    update(oldState, transaction) {
      const builder = new import_state.RangeSetBuilder();
      const livePreview = transaction.state.field(import_obsidian.editorLivePreviewField);
      if (livePreview) {
        const editorInfo = transaction.state.field(import_obsidian.editorInfoField);
        const doc = transaction.state.doc;
        const from = 0;
        const to = transaction.state.doc.length;
        let insideCallout = false;
        let calloutType = "";
        let calloutText = "";
        let calloutFrom = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak) {
            if (cursor.value[0] != "{") {
              if (insideCallout) {
                calloutText += cursor.value;
              }
              continue;
            }
            while (m = tagRegex.exec(cursor.value)) {
              const tag = m[1];
              const name = m[2];
              if (editorInfo.file) {
                const file = plugin.app.metadataCache.getFirstLinkpathDest(name, editorInfo.file.path);
                if (file) {
                  const path = plugin.app.vault.getResourcePath(file) + "?" + file.stat.mtime;
                  builder.add(pos + m.index, pos + m.index + m[0].length, import_view.Decoration.replace({ widget: new TagWidget(tag, path, file.path) }));
                }
              }
            }
            while (m = calloutStartRegex.exec(cursor.value)) {
              insideCallout = true;
              calloutType = m[1];
              calloutFrom = pos + m.index;
            }
            while (m = calloutEndRegex.exec(cursor.value)) {
              if (insideCallout) {
                builder.add(calloutFrom, pos + m.index + m[0].length, import_view.Decoration.replace({ widget: new CalloutWidget(calloutType, calloutText) }));
                insideCallout = false;
                calloutType = "";
                calloutText = "";
                calloutFrom = 0;
              }
            }
          }
        }
      }
      return builder.finish();
    },
    provide(field) {
      return import_view.EditorView.decorations.from(field);
    }
  });
}
var ShortCodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(createStateField(this));
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBlZGl0b3JMaXZlUHJldmlld0ZpZWxkLCBlZGl0b3JJbmZvRmllbGQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge1xuXHRFeHRlbnNpb24sXG5cdFJhbmdlU2V0QnVpbGRlcixcblx0U3RhdGVGaWVsZCxcblx0VHJhbnNhY3Rpb24sXG5cdEVkaXRvclN0YXRlLFxufSBmcm9tICdAY29kZW1pcnJvci9zdGF0ZSc7XG5pbXBvcnQge1xuXHREZWNvcmF0aW9uLFxuXHREZWNvcmF0aW9uU2V0LFxuXHRFZGl0b3JWaWV3LFxuXHRXaWRnZXRUeXBlfSBmcm9tICdAY29kZW1pcnJvci92aWV3JztcblxuLy8gPGltZyBzcmM9XCJpbWFnZS53ZWJwXCI+XG5jbGFzcyBUYWdXaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcblx0cmVhZG9ubHkgdGFnOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHNyYzogc3RyaW5nO1xuXHRyZWFkb25seSBmaWxlUGF0aDogc3RyaW5nO1xuXHRjb25zdHJ1Y3Rvcih0YWc6IHN0cmluZywgc3JjOiBzdHJpbmcsIGZpbGVQYXRoOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudGFnID0gdGFnO1xuXHRcdHRoaXMuc3JjID0gc3JjO1xuXHRcdHRoaXMuZmlsZVBhdGggPSBmaWxlUGF0aDtcblx0fVxuXHRlcSh3aWRnZXQ6IFRhZ1dpZGdldCkge1xuXHRcdHJldHVybiB3aWRnZXQuc3JjID09PSB0aGlzLnNyYyAmJiB3aWRnZXQuZmlsZVBhdGggPT09IHRoaXMuZmlsZVBhdGg7XG5cdH1cblx0dG9ET00odmlldzogRWRpdG9yVmlldyk6IEhUTUxFbGVtZW50IHtcblx0XHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZyk7XG5cdFx0ZWxlbWVudC5zZXRBdHRyKCdzcmMnLCB0aGlzLnNyYylcblx0XHRlbGVtZW50LnNldEF0dHIoJ2RhdGEtcGF0aCcsIHRoaXMuZmlsZVBhdGgpO1xuXHRcdHJldHVybiBlbGVtZW50O1xuXHR9XG5cdGlnbm9yZUV2ZW50KGV2ZW50OiBFdmVudCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5jbGFzcyBDYWxsb3V0V2lkZ2V0IGV4dGVuZHMgV2lkZ2V0VHlwZSB7XG5cdHJlYWRvbmx5IHR5cGU6IHN0cmluZztcblx0cmVhZG9ubHkgdGV4dDogc3RyaW5nO1xuXHRjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLnRleHQgPSB0ZXh0O1xuXHR9XG5cdGVxKHdpZGdldDogQ2FsbG91dFdpZGdldCkge1xuXHRcdHJldHVybiB3aWRnZXQudHlwZSA9PT0gdGhpcy50eXBlICYmIHdpZGdldC50ZXh0ID09PSB0aGlzLnRleHQ7XG5cdH1cblx0dG9ET00odmlldzogRWRpdG9yVmlldyk6IEhUTUxFbGVtZW50IHtcblx0XHRjb25zdCBjYWxsb3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0Y2FsbG91dC5zZXRBdHRyKCdjbGFzcycsICdjYWxsb3V0Jylcblx0XHRjYWxsb3V0LnNldEF0dHIoJ2RhdGEtY2FsbG91dCcsIHRoaXMudHlwZSk7XG5cdFx0Y29uc3QgY2FsbG91dFRpdGxlID0gY2FsbG91dC5jcmVhdGVFbCgnZGl2Jyk7XG5cdFx0Y2FsbG91dFRpdGxlLnNldEF0dHIoJ2NsYXNzJywgJ2NhbGxvdXQtdGl0bGUnKVxuXHRcdGNvbnN0IGNhbGxvdXRUaXRsZUlubmVyID0gY2FsbG91dFRpdGxlLmNyZWF0ZUVsKCdkaXYnKTtcblx0XHRjYWxsb3V0VGl0bGVJbm5lci5zZXRBdHRyKCdjbGFzcycsICdjYWxsb3V0LXRpdGxlLWlubmVyJylcblx0XHRjYWxsb3V0VGl0bGVJbm5lci5pbm5lckhUTUwgPSB0aGlzLnR5cGVcblx0XHRjb25zdCBjb250ZW50ID0gY2FsbG91dC5jcmVhdGVFbCgnZGl2Jyk7XG5cdFx0Y29udGVudC5zZXRBdHRyKCdjbGFzcycsICdjYWxsb3V0LWNvbnRlbnQnKTtcblx0XHRjb250ZW50LmlubmVySFRNTCA9IHRoaXMudGV4dDtcblx0XHRyZXR1cm4gY2FsbG91dDtcblx0fVxufVxuXG5jb25zdCB0YWdSZWdleCA9IC97e1xccyooaW1nfHZpZGVvKVxcKHNyYz1cIihbXFwvXFwuXFx3LV0rKVwiLip9fS9nO1xuY29uc3QgY2FsbG91dFN0YXJ0UmVnZXggPSAvXnslXFxzKmNhbGxvdXRcXCh0eXBlPVwiKGluZm98dGlwfHdhcm58ZGFuZ2VyKVwiXFwpXFxzKiV9JC9nXG5jb25zdCBjYWxsb3V0RW5kUmVnZXggPSAvXnslXFxzKmVuZFxccyolfSQvZ1xuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZUZpZWxkKHBsdWdpbjogU2hvcnRDb2RlUGx1Z2luKTogU3RhdGVGaWVsZDxEZWNvcmF0aW9uU2V0PiB7XG5cdHJldHVybiBTdGF0ZUZpZWxkLmRlZmluZTxEZWNvcmF0aW9uU2V0Pih7XG5cdFx0Y3JlYXRlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IERlY29yYXRpb25TZXQge1xuXHRcdFx0cmV0dXJuIERlY29yYXRpb24ubm9uZTtcblx0XHR9LFxuXHRcdHVwZGF0ZShvbGRTdGF0ZTogRGVjb3JhdGlvblNldCwgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogRGVjb3JhdGlvblNldCB7XG5cdFx0XHRjb25zdCBidWlsZGVyID0gbmV3IFJhbmdlU2V0QnVpbGRlcjxEZWNvcmF0aW9uPigpO1xuXHRcdFx0Y29uc3QgbGl2ZVByZXZpZXcgPSB0cmFuc2FjdGlvbi5zdGF0ZS5maWVsZChlZGl0b3JMaXZlUHJldmlld0ZpZWxkKVxuXHRcdFx0aWYgKGxpdmVQcmV2aWV3KSB7XG5cdFx0XHRcdGNvbnN0IGVkaXRvckluZm8gPSB0cmFuc2FjdGlvbi5zdGF0ZS5maWVsZChlZGl0b3JJbmZvRmllbGQpO1xuXHRcdFx0XHRjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5zdGF0ZS5kb2M7XG5cdFx0XHRcdGNvbnN0IGZyb20gPSAwO1xuXHRcdFx0XHRjb25zdCB0byA9IHRyYW5zYWN0aW9uLnN0YXRlLmRvYy5sZW5ndGg7XG5cdFx0XHRcdGxldCBpbnNpZGVDYWxsb3V0ID0gZmFsc2U7XG5cdFx0XHRcdGxldCBjYWxsb3V0VHlwZSA9IFwiXCI7XG5cdFx0XHRcdGxldCBjYWxsb3V0VGV4dCA9IFwiXCI7XG5cdFx0XHRcdGxldCBjYWxsb3V0RnJvbSA9IDA7XG5cdFx0XHRcdGZvciAobGV0IGN1cnNvciA9IGRvYy5pdGVyUmFuZ2UoZnJvbSwgdG8pLCBwb3MgPSBmcm9tLCBtOyAhY3Vyc29yLm5leHQoKS5kb25lOyBwb3MgKz0gY3Vyc29yLnZhbHVlLmxlbmd0aCkge1xuXHRcdFx0XHRcdGlmICghY3Vyc29yLmxpbmVCcmVhaykge1xuXHRcdFx0XHRcdFx0aWYoY3Vyc29yLnZhbHVlWzBdICE9ICd7JykgeyAvL25vdCBhIHNob3J0Y29kZSBsaW5lXG5cdFx0XHRcdFx0XHRcdGlmKGluc2lkZUNhbGxvdXQpXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsb3V0VGV4dCArPSBjdXJzb3IudmFsdWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGN1cnNvci52YWx1ZSk7XG5cdFx0XHRcdFx0XHQvL3RhZ1xuXHRcdFx0XHRcdFx0d2hpbGUobSA9IHRhZ1JlZ2V4LmV4ZWMoY3Vyc29yLnZhbHVlKSl7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHRhZyA9IG1bMV07XG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtWzJdO1xuXHRcdFx0XHRcdFx0XHRpZiAoZWRpdG9ySW5mby5maWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChuYW1lLCBlZGl0b3JJbmZvLmZpbGUucGF0aCk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGZpbGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBhdGggPSBwbHVnaW4uYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKSArICc/JyArIGZpbGUuc3RhdC5tdGltZTtcblx0XHRcdFx0XHRcdFx0XHRcdGJ1aWxkZXIuYWRkKHBvcyArIG0uaW5kZXgsIHBvcyArIG0uaW5kZXggKyBtWzBdLmxlbmd0aCwgRGVjb3JhdGlvbi5yZXBsYWNlKHsgd2lkZ2V0OiBuZXcgVGFnV2lkZ2V0KHRhZywgcGF0aCwgZmlsZS5wYXRoKSB9KSlcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vY2FsbG91dCBzdGFydFxuXHRcdFx0XHRcdFx0d2hpbGUobSA9IGNhbGxvdXRTdGFydFJlZ2V4LmV4ZWMoY3Vyc29yLnZhbHVlKSl7XG5cdFx0XHRcdFx0XHRcdGluc2lkZUNhbGxvdXQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRjYWxsb3V0VHlwZSA9IG1bMV07XG5cdFx0XHRcdFx0XHRcdGNhbGxvdXRGcm9tID0gcG9zICsgbS5pbmRleDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vY2FsbG91dCBlbmRcblx0XHRcdFx0XHRcdHdoaWxlKG0gPSBjYWxsb3V0RW5kUmVnZXguZXhlYyhjdXJzb3IudmFsdWUpKXtcblx0XHRcdFx0XHRcdFx0aWYoaW5zaWRlQ2FsbG91dCl7XG5cdFx0XHRcdFx0XHRcdFx0YnVpbGRlci5hZGQoY2FsbG91dEZyb20sIHBvcyArIG0uaW5kZXggKyBtWzBdLmxlbmd0aCwgRGVjb3JhdGlvbi5yZXBsYWNlKHsgd2lkZ2V0OiBuZXcgQ2FsbG91dFdpZGdldChjYWxsb3V0VHlwZSwgY2FsbG91dFRleHQpIH0pKVxuXHRcdFx0XHRcdFx0XHRcdGluc2lkZUNhbGxvdXQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsb3V0VHlwZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbG91dFRleHQgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxvdXRGcm9tID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYnVpbGRlci5maW5pc2goKTtcblx0XHR9LFxuXHRcdHByb3ZpZGUoZmllbGQ6IFN0YXRlRmllbGQ8RGVjb3JhdGlvblNldD4pOiBFeHRlbnNpb24ge1xuXHRcdFx0cmV0dXJuIEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmaWVsZCk7XG5cdFx0fSxcblx0fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3J0Q29kZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKGNyZWF0ZVN0YXRlRmllbGQodGhpcykpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBZ0U7QUFDaEUsbUJBTU87QUFDUCxrQkFJa0I7QUFHbEIsSUFBTSxZQUFOLGNBQXdCLHVCQUFXO0FBQUEsRUFJbEMsWUFBWSxLQUFhLEtBQWEsVUFBa0I7QUFDdkQsVUFBTTtBQUNOLFNBQUssTUFBTTtBQUNYLFNBQUssTUFBTTtBQUNYLFNBQUssV0FBVztBQUFBLEVBQ2pCO0FBQUEsRUFDQSxHQUFHLFFBQW1CO0FBQ3JCLFdBQU8sT0FBTyxRQUFRLEtBQUssT0FBTyxPQUFPLGFBQWEsS0FBSztBQUFBLEVBQzVEO0FBQUEsRUFDQSxNQUFNLE1BQStCO0FBQ3BDLFVBQU0sVUFBVSxTQUFTLGNBQWMsS0FBSyxHQUFHO0FBQy9DLFlBQVEsUUFBUSxPQUFP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
