/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ShortCodePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var TagWidget = class extends import_view.WidgetType {
  constructor(tag, src, filePath) {
    super();
    this.tag = tag;
    this.src = src;
    this.filePath = filePath;
  }
  eq(widget) {
    return widget.src === this.src && widget.filePath === this.filePath;
  }
  toDOM(view) {
    const element = document.createElement(this.tag);
    element.setAttr("src", this.src);
    element.setAttr("data-path", this.filePath);
    if (this.tag == "video") {
      element.setAttr("controls", "");
      element.setAttr("preload", "metadata");
    }
    return element;
  }
  ignoreEvent(event) {
    return false;
  }
};
var CalloutWidget = class extends import_view.WidgetType {
  constructor(type, text) {
    super();
    this.type = type;
    this.text = text;
  }
  eq(widget) {
    return widget.type === this.type && widget.text === this.text;
  }
  toDOM(view) {
    const callout = document.createElement("div");
    callout.setAttr("class", "callout");
    callout.setAttr("data-callout", this.type);
    this.text.setAttr("class", "callout-content");
    callout.appendChild(this.text);
    return callout;
  }
  ignoreEvent(event) {
    return false;
  }
};
var tagRegex = /{{\s*(img|video)\(src="([\/\.\w-]+)".*}}/g;
var calloutRegex = /^{%\s*(info|tip|warning|danger)\(\)\s*%}(.*){%\s*end\s*%}$/g;
function createStateField(plugin) {
  return import_state.StateField.define({
    create(state) {
      return import_view.Decoration.none;
    },
    update(oldState, transaction) {
      var _a, _b;
      const builder = new import_state.RangeSetBuilder();
      const livePreview = transaction.state.field(import_obsidian.editorLivePreviewField);
      if (livePreview) {
        const editorInfo = transaction.state.field(import_obsidian.editorInfoField);
        const selection = transaction.state.selection.main;
        const doc = transaction.state.doc;
        const from = 0;
        const to = transaction.state.doc.length;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak) {
            if (cursor.value[0] != "{") {
              continue;
            }
            while (m = tagRegex.exec(cursor.value)) {
              const tag = m[1];
              const name = m[2];
              const tagFrom = pos + m.index;
              const tagTo = pos + m.index + m[0].length;
              if (editorInfo.file) {
                const file = plugin.app.metadataCache.getFirstLinkpathDest(name, editorInfo.file.path);
                if (file) {
                  const path = plugin.app.vault.getResourcePath(file) + "?" + file.stat.mtime;
                  if (selection.from < tagFrom || selection.to > tagTo) {
                    builder.add(tagFrom, tagTo, import_view.Decoration.replace({ widget: new TagWidget(tag, path, file.path) }));
                  } else {
                    builder.add(tagTo, tagTo, import_view.Decoration.widget({ widget: new TagWidget(tag, path, file.path) }));
                  }
                }
              }
            }
            while (m = calloutRegex.exec(cursor.value)) {
              const type = m[1];
              const text = m[2];
              const calloutFrom = pos + m.index;
              const calloutTo = pos + m.index + m[0].length;
              if (selection.from < calloutFrom || selection.to > calloutTo) {
                var content = document.createElement("span");
                import_obsidian.MarkdownRenderer.render(
                  this.app,
                  text,
                  content,
                  (_b = (_a = editorInfo.file) == null ? void 0 : _a.path) != null ? _b : "",
                  new import_obsidian.Component()
                );
                builder.add(calloutFrom, calloutTo, import_view.Decoration.replace({ widget: new CalloutWidget(type, content) }));
              }
            }
          }
        }
      }
      return builder.finish();
    },
    provide(field) {
      return import_view.EditorView.decorations.from(field);
    }
  });
}
var ShortCodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(createStateField(this));
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
